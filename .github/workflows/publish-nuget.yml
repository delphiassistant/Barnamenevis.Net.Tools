name: Publish NuGet Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish'
        required: true
        default: '1.0.0'

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

jobs:
  publish:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Run tests (if any)
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
      continue-on-error: true

    - name: Create NuGet packages
      run: dotnet pack --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal

    - name: List generated packages
      run: |
        Write-Host "Generated packages:"
        Get-ChildItem -Recurse -Filter "*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" } | ForEach-Object {
          Write-Host "?? $($_.FullName) ($([math]::Round($_.Length / 1KB, 2)) KB)"
        }
      shell: pwsh

    - name: Publish WPF Package
      run: |
        $package = Get-ChildItem -Path "Barnamenevis.Net.RtlMessageBox.Wpf/bin/${{ env.CONFIGURATION }}" -Filter "*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" } | Select-Object -First 1
        if ($package) {
          Write-Host "Publishing WPF package: $($package.Name)"
          dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        } else {
          Write-Host "No WPF package found to publish"
          exit 1
        }
      shell: pwsh

    - name: Publish WindowsForms Package
      run: |
        $package = Get-ChildItem -Path "Barnamenevis.Net.RtlMessageBox.WindowsForms/bin/${{ env.CONFIGURATION }}" -Filter "*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" } | Select-Object -First 1
        if ($package) {
          Write-Host "Publishing WindowsForms package: $($package.Name)"
          dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        } else {
          Write-Host "No WindowsForms package found to publish"
          exit 1
        }
      shell: pwsh

    - name: Publish Tools Package
      run: |
        $package = Get-ChildItem -Path "Barnamenevis.Net.FontInstaller/bin/${{ env.CONFIGURATION }}" -Filter "*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" } | Select-Object -First 1
        if ($package) {
          Write-Host "Publishing Tools package: $($package.Name)"
          dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        } else {
          Write-Host "No Tools package found to publish"
          exit 1
        }
      shell: pwsh

    - name: Create Release Summary
      run: |
        Write-Host "?? Packages published successfully!"
        Write-Host ""
        Write-Host "?? Published packages:"
        Write-Host "• Barnamenevis.Net.RtlMessageBox.Wpf"
        Write-Host "• Barnamenevis.Net.RtlMessageBox.WindowsForms"  
        Write-Host "• Barnamenevis.Net.Tools"
        Write-Host ""
        Write-Host "?? View packages: https://www.nuget.org/packages/manage"
        Write-Host "??  Packages may take a few minutes to appear in search results"
      shell: pwsh

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: |
          **/*.nupkg
          **/*.snupkg
        retention-days: 30